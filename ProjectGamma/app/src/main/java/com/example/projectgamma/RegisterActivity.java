package com.example.projectgamma;


import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Text;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Arrays;

import static com.example.projectgamma.LoginActivity.get_SHA_1_SecurePassword;

public class RegisterActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener {

    ConnectivityManager conMgr;
    NetworkInfo activeNetwork;
    List<String>list=new ArrayList<>();
    String[] Cleancourses,Cleancodes;
    TextView Message;

    //Variable assigning and initialization
    private EditText et_name, et_SN, et_password, et_cpassword;
    String name, email, Stu_Num, password, cpassword;
    TextView wind;
    Button regbtn,uploadbtn;
    AlertDialog myDialog;
    private Spinner mySpinner;
    private List<String> courses;
    String item;
    TextView Course1, Course2, Course3, Course4, Course5, Course_Error;
    int count = 0;
    RadioGroup RadioGroup;
    RadioButton RadioButton;
    String selectedRole="0";
      boolean[] test;

    ArrayList<Integer> selectedItems = new ArrayList();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        //Assigning components to variables
        Message=(TextView) findViewById(R.id.Course_err);
        RadioGroup=(RadioGroup) findViewById(R.id.RadioGroup);
        Button showBtn = findViewById(R.id.showAlertID);
        showBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showAlert();
            }
        });
        et_name = findViewById(R.id.name);
        et_SN = findViewById(R.id.SN_TB);
        et_password = findViewById(R.id.password);
        et_cpassword = findViewById(R.id.cpassword);
        regbtn = findViewById(R.id.test);
        wind = findViewById(R.id.AG_email);
        Course1 = findViewById(R.id.Course1);
        Course2 = findViewById(R.id.Course2);
        Course3 = findViewById(R.id.Course3);
        Course4 = findViewById(R.id.Course4);
        Course5 = findViewById(R.id.Course5);
        Course_Error = findViewById(R.id.Course_Error);
        //Initializes a Spinner which is used to select the courses selected by the tutor




        regbtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                register();
            }

        });


        Thread refresh = new Thread() {
            @Override
            public void run() {
                while (!isInterrupted()) {
                    try {
                        Thread.sleep(100);
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {

                                count++;
                                //Constantly refresh the email address which is generated by appending the student number to "@students.wits.ac.za
                                Stu_Num = et_SN.getText().toString().trim();
                                if (Stu_Num.length() != 0 || count < 10) {
                                    wind.setText(Stu_Num.toString() + "@students.wits.ac.za");
                                    email = et_SN.getText().toString() + "@students.wits.ac.za";

                                } else {
                                    wind.setText(" " + "@students.wits.ac.za");
                                }
                            }


                        });
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        refresh.start();
    }

    //Gets the item selected
    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        item = parent.getItemAtPosition(position).toString();
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {

    }
    public void check_button(View v){

        int radioID=RadioGroup.getCheckedRadioButtonId();
        RadioButton=findViewById(radioID);
        System.out.println("THE ANSWER "+RadioButton.getText());
        if(RadioButton.getText().equals("Tutor")){
            Message.setText("Please Select The Courses you will like to Tutor(Max 5).");

            selectedRole="0";
        }
        else{
            Message.setText("Please Select The Courses You Willl be Responsible For(Max 5).");
            selectedRole="1";
        }
        System.out.println("SELECTED "+radioID);
    }
    private void showAlert() {
        //Displays the courses in the popup spinner
        final AlertDialog.Builder myBuilder = new AlertDialog.Builder(this);
        if(list.size()==0) {
            try {
                String login_url = "http://lamp.ms.wits.ac.za/~s1601745/get_all_courses.php";
                String post_data = "";
                //Initialize an HTTP POST connection to send data to the server
                URL url = new URL(login_url);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                httpURLConnection.setRequestMethod("POST");
                httpURLConnection.setDoOutput(true);
                httpURLConnection.setDoInput(true);
                OutputStream outputStream = httpURLConnection.getOutputStream();
                BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));

//Retrieves the informations passed from other classes to BackgroundWorker if we are trying to register

                bufferedWriter.write(post_data);
                bufferedWriter.flush();
                bufferedWriter.close();
                outputStream.close();
                InputStream inputStream = httpURLConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
                String result = "";
                String line = "";
                while ((line = bufferedReader.readLine()) != null) {
                    result += line;
                }
                bufferedReader.close();
                inputStream.close();
                httpURLConnection.disconnect();
                try {
                    JSONObject ja = new JSONObject(result);
                    String Allcourses = ja.getString("course_name").toString().substring(1, ja.get("course_name").toString().length() - 1).replace("\"", "");
                    String Allcodes = ja.getString("course_code").toString().substring(1, ja.get("course_code").toString().length() - 1).replace("\"", "");
                    Cleancourses = Allcourses.split(",");
                    Cleancodes = Allcodes.split(",");
                    for (int i = 0; i < Cleancourses.length; i++) {
                        list.add(Cleancodes[i] + "-(" + Cleancourses[i] + ")");
                    }
                    test=new boolean[list.size()];
                    Collections.sort(list);
                    Arrays.sort(Cleancodes);
                    System.out.println(list);
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            } catch (
                    MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();

            }
        }

        final  CharSequence[] finalThe_courses = list.toArray(new CharSequence[list.size()]);

        myBuilder.setTitle("Proposed Courses").setMultiChoiceItems(finalThe_courses,test , new DialogInterface.OnMultiChoiceClickListener() {
            @Override

            public void onClick(DialogInterface dialogInterface, int position, boolean isChecked) {
                //Selects the labels of the courses selected by the user
                selectedItems.clear();
                if (isChecked == true) {
                    test[position]=true;
                }

            }
        });
        myBuilder.setPositiveButton("Selected Items", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                for(int i=0;i<test.length;i++){
                    if(test[i]==true){
                        selectedItems.add(i);
                    }
                }
                if (selectedItems.size() >= 1) {
                    Course1.setText(list.get(selectedItems.get(0)));
                    Course2.setText(null);
                    Course3.setText(null);
                    Course4.setText(null);
                    Course5.setText(null);
                }
                if (selectedItems.size() >= 2) {
                    Course2.setText(list.get(selectedItems.get(1)));
                    Course3.setText(null);
                    Course4.setText(null);
                    Course5.setText(null);
                }
                if (selectedItems.size() >= 3) {
                    Course3.setText(list.get(selectedItems.get(2)));
                    Course4.setText(null);
                    Course5.setText(null);
                }
                if (selectedItems.size() >= 4) {
                    Course4.setText(list.get(selectedItems.get(3)));

                    Course5.setText(null);
                }
                if (selectedItems.size() >= 5) {
                    Course5.setText(list.get(selectedItems.get(4)));
                }
            }
        });
        myDialog = myBuilder.create();
        myDialog.show();
    }


    public void register() {
        initialize();
        //If the users input is invalid,registration is unsuccessful
        if (validate() == false) {
            Toast.makeText(this, "Signup has failed", Toast.LENGTH_SHORT).show();
        } else {
            ConnectivityManager conMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo activeNetwork = conMgr.getActiveNetworkInfo();
            if(activeNetwork != null && activeNetwork.isConnected()) {
                onSignupSuccess();
            }
            else{
                Toast.makeText(RegisterActivity.this, "Please check  your internet connection and try again.", Toast.LENGTH_SHORT).show();

            }
        }
    }



    //If the signup is successful
    public void onSignupSuccess() {
//Sets the type for which the BackgroundWorker will be used for
        String type = "reg";
        //String test = String.valueOf(selectedItems);
        // String[] arr = new String[20];
        //arr = test.split(",");
        System.out.println("LIST"+selectedItems);

        //Sends the information to the backgroundworker depending on the number of courses selected
        if (selectedItems.size() == 1) {

            BackgroundWorker backgroundWorker = new BackgroundWorker(this);
            System.out.println("REGISTER"+get_SHA_1_SecurePassword(password,Stu_Num)+" "+password+" "+Stu_Num);
            backgroundWorker.execute(type, name, Stu_Num, email, get_SHA_1_SecurePassword(password,Stu_Num),selectedRole, Cleancodes[selectedItems.get(0)]);
        }
        if (selectedItems.size() == 2) {

            BackgroundWorker backgroundWorker = new BackgroundWorker(this);
            backgroundWorker.execute(type, name, Stu_Num, email, get_SHA_1_SecurePassword(password,Stu_Num),selectedRole,Cleancodes[selectedItems.get(0)],Cleancodes[selectedItems.get(1)]);
        }
        if (selectedItems.size() == 3) {

            BackgroundWorker backgroundWorker = new BackgroundWorker(this);
            backgroundWorker.execute(type, name, Stu_Num, email, get_SHA_1_SecurePassword(password,Stu_Num), selectedRole,Cleancodes[selectedItems.get(0)],Cleancodes[selectedItems.get(1)],Cleancodes[selectedItems.get(2)]);
        }
        if (selectedItems.size() == 4) {


            BackgroundWorker backgroundWorker = new BackgroundWorker(this);
            backgroundWorker.execute(type, name, Stu_Num, email, get_SHA_1_SecurePassword(password,Stu_Num),selectedRole,Cleancodes[selectedItems.get(0)],Cleancodes[selectedItems.get(1)],Cleancodes[selectedItems.get(2)],Cleancodes[selectedItems.get(3)]);
        }
        if (selectedItems.size() == 5) {

            BackgroundWorker backgroundWorker = new BackgroundWorker(this);
            backgroundWorker.execute(type, name, Stu_Num, email, get_SHA_1_SecurePassword(password,Stu_Num),selectedRole,Cleancodes[selectedItems.get(0)],Cleancodes[selectedItems.get(1)],Cleancodes[selectedItems.get(2)],Cleancodes[selectedItems.get(3)],Cleancodes[selectedItems.get(4)]);
        }

    }




    //Validates the users input on the register screen
    public boolean validate() {
        boolean valid = true;
        //checks if no courses has been selected
        if (selectedItems.size() == 0) {

            Course1.setText(("Please Select atleast one Course"));
            valid = false;
        }
        //Checks if  no name has been entered or a too long name has been entered
        if (name.isEmpty() || name.length() > 32) {
            et_name.setError("Please enter a valid name");
            valid = false;
        }
//Checks if a password has been entered
        if (password.isEmpty()) {
            et_password.setError("Please enter a valid password");
            valid = false;
        }
        //Checks if the confirm password has been entered
        if (cpassword.isEmpty()) {
            et_cpassword.setError("Please enter a valid password");
            valid = false;
        }
        //Checks if a student number has been entered or a too long student number has been entered
        if (Stu_Num.isEmpty() || Stu_Num.length() > 10) {
            et_SN.setError("Please enter your Student Number");
            valid = false;
        }
        if (cpassword.isEmpty()) {
            et_cpassword.setError("Please confirm your password");
        }
        //Checks if the password=confirm password
        if (!password.equals(cpassword)) {
            et_cpassword.setError("Passwords do not correspond");
            valid = false;
        }

        return valid;
    }
    //Initiliizes the users input
    public void initialize() {
        name = et_name.getText().toString().trim();
        Stu_Num = et_SN.getText().toString().trim();
        password = et_password.getText().toString().trim();
        cpassword = et_cpassword.getText().toString().trim();
    }
}


