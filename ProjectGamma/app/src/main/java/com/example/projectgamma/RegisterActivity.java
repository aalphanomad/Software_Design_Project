package com.example.projectgamma;


import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.w3c.dom.Text;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

public class RegisterActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener {

     ConnectivityManager conMgr;
     NetworkInfo activeNetwork;

    //Variable assigning and initialization
    private EditText et_name, et_SN, et_password, et_cpassword;
    String name, email, Stu_Num, password, cpassword;
    TextView wind;
    Button regbtn,uploadbtn;
    AlertDialog myDialog;
    private Spinner mySpinner;
    private List<String> courses;
    String item;
    TextView Course1, Course2, Course3, Course4, Course5, Course_Error;
    int count = 0;
    ArrayList selectedItems = new ArrayList();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_register);

        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        //Assigning components to variables
        Button showBtn = findViewById(R.id.showAlertID);
        showBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                showAlert();
            }
        });
        et_name = findViewById(R.id.name);
        et_SN = findViewById(R.id.SN_TB);
        et_password = findViewById(R.id.password);
        et_cpassword = findViewById(R.id.cpassword);
        regbtn = findViewById(R.id.test);
        wind = findViewById(R.id.AG_email);
        Course1 = findViewById(R.id.Course1);
        Course2 = findViewById(R.id.Course2);
        Course3 = findViewById(R.id.Course3);
        Course4 = findViewById(R.id.Course4);
        Course5 = findViewById(R.id.Course5);
        Course_Error = findViewById(R.id.Course_Error);
        //Initializes a Spinner which is used to select the courses selected by the tutor
        mySpinner = (Spinner) findViewById(R.id.Degree_Spinner);
        mySpinner.setOnItemSelectedListener(this);
        courses = new ArrayList<String>();
        courses.add("COMS");
        courses.add("CAM");
//ode used to help initialize the spinner(Which array to display
        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, courses);
        dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mySpinner.setAdapter(dataAdapter);


        regbtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                    register();


            }

        });

        uploadbtn = findViewById(R.id.upload_but);
        uploadbtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Intent i = new Intent(RegisterActivity.this, upload_transcript.class);
                RegisterActivity.this.startActivity(i);
            }
        });
        Thread refresh = new Thread() {
            @Override
            public void run() {
                while (!isInterrupted()) {
                    try {
                        Thread.sleep(100);
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {

                                count++;
                                //Constantly refresh the email address which is generated by appending the student number to "@students.wits.ac.za
                                Stu_Num = et_SN.getText().toString().trim();
                                if (Stu_Num.length() != 0 || count < 10) {
                                    wind.setText(Stu_Num.toString() + "@students.wits.ac.za");
                                    email = et_SN.getText().toString() + "@students.wits.ac.za";

                                } else {
                                    wind.setText(" " + "@students.wits.ac.za");
                                }
                            }


                        });
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        refresh.start();
    }

    //Gets the item selected
    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        item = parent.getItemAtPosition(position).toString();
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {

    }

    private void showAlert() {
        //Displays the courses in the popup spinner
        AlertDialog.Builder myBuilder = new AlertDialog.Builder(this);
        CharSequence[] The_courses = new CharSequence[50];
        CharSequence[] COMS_Courses = {"COMS1015 (Basic Computer Organisation)", "COMS1018 (Introduction to Algorithms and Programming)", "COMS1017 (Introduction to Data Structures and Algorithms", "COMS1016 (Discrete Computational Structures)", "COMS2002 (Database Fundementals)", "COMS2013 (Mobile Computing)", "COMS2014 (Computer Networks)", "COMS2015 (Analysis of Algorithms)", "COMS3003 (Formal Languages and Automata)", "COMS3005 (Advanced Analysis of Algorithms)", "COMS3009 (Software Design)", "COMS3010 (Operating Systems and System Programming)", "COMS3007 (Machine Learning)", "COMS3006 (Computer Graphics and Visualisation)", "COMS3008 (Parallel Computing)", "COMS3011 (Software Design)"};
        CharSequence[] CAM_Courses = {"APPM1006", "APPM1025", "APPM2007", "CAM3017"};
        if (item == "COMS") {
            The_courses = COMS_Courses;
        } else if (item == "CAM") {
            The_courses = CAM_Courses;
        }

        final CharSequence[] finalThe_courses = The_courses;
        myBuilder.setTitle("Proposed Courses").setMultiChoiceItems(The_courses, null, new DialogInterface.OnMultiChoiceClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int position, boolean isChecked) {
                //Selects the labels of the courses seleted by the user
                if (isChecked == true) {
                    selectedItems.add(finalThe_courses[position]);
                } else if (selectedItems.contains(position)) {
                    selectedItems.remove(Integer.valueOf(position));
                }
                if (selectedItems.size() >= 1) {
                    Course1.setText(selectedItems.get(0).toString());
                }
                if (selectedItems.size() >= 2) {
                    Course2.setText(selectedItems.get(1).toString());
                }
                if (selectedItems.size() >= 3) {
                    Course3.setText(selectedItems.get(2).toString());
                }
                if (selectedItems.size() >= 4) {
                    Course4.setText(selectedItems.get(3).toString());
                }
                if (selectedItems.size() >= 5) {
                    Course5.setText(selectedItems.get(4).toString());
                }
            }
        });
        myBuilder.setPositiveButton("Selected Items", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                StringBuilder sb = new StringBuilder();
                for (Object i : selectedItems) {
                    sb.append(i.toString() + "\n");
                }
            }
        });
        myDialog = myBuilder.create();
        myDialog.show();
    }


    public void register() {
        initialize();
        //If the users input is invalid,registration is unsuccessful
        if (validate() == false) {
            Toast.makeText(this, "Signup has failed", Toast.LENGTH_SHORT).show();
        } else {
            ConnectivityManager conMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
            NetworkInfo activeNetwork = conMgr.getActiveNetworkInfo();
if(activeNetwork != null && activeNetwork.isConnected()) {
    onSignupSuccess();
}
else{
    Toast.makeText(RegisterActivity.this, "Please check  your internet connection and try again.", Toast.LENGTH_SHORT).show();

}
        }
    }

    //If the signup is successful
    public void onSignupSuccess() {
//Sets the type for which the BackgroundWorker will be used for
        String type = "reg";
        InputStream is = null;
        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
        nameValuePairs.add(new BasicNameValuePair("name", name));
        nameValuePairs.add(new BasicNameValuePair("studentnum", Stu_Num));
        nameValuePairs.add(new BasicNameValuePair("email", email));
        nameValuePairs.add(new BasicNameValuePair("password", password));
        String test = String.valueOf(selectedItems);
        String[] arr = new String[20];
        arr = test.split(",");

            //Sends the information to the backgroundworker depending on the number of courses selected
            if (selectedItems.size() == 1) {
                String[] arr1;
                arr1 = arr[0].split(" ");

                BackgroundWorker backgroundWorker = new BackgroundWorker(this);
                backgroundWorker.execute(type, name, Stu_Num, email, password, arr1[0].substring(1, arr1[0].length()));
            }
            if (selectedItems.size() == 2) {
                String[] arr1;
                arr1 = arr[0].split(" ");

                String[] arr2;
                arr2 = arr[1].split(" ");

                BackgroundWorker backgroundWorker = new BackgroundWorker(this);
                backgroundWorker.execute(type, name, Stu_Num, email, password, arr1[0].substring(1, arr1[0].length()), arr2[1]);
            }
            if (selectedItems.size() == 3) {
                String[] arr1;
                arr1 = arr[0].split(" ");

                String[] arr2;
                arr2 = arr[1].split(" ");

                String[] arr3;
                arr3 = arr[2].split(" ");

                BackgroundWorker backgroundWorker = new BackgroundWorker(this);
                backgroundWorker.execute(type, name, Stu_Num, email, password, arr1[0].substring(1, arr1[0].length()), arr2[1], arr3[1]);
            }
            if (selectedItems.size() == 4) {
                String[] arr1;
                arr1 = arr[0].split(" ");

                String[] arr2;
                arr2 = arr[1].split(" ");

                String[] arr3;
                arr3 = arr[2].split(" ");

                String[] arr4;
                arr4 = arr[3].split(" ");

                BackgroundWorker backgroundWorker = new BackgroundWorker(this);
                backgroundWorker.execute(type, name, Stu_Num, email, password, arr1[0].substring(1, arr1[0].length()), arr2[1], arr3[1], arr4[1]);
            }
            if (selectedItems.size() == 5) {
                String[] arr1;
                arr1 = arr[0].split(" ");

                String[] arr2;
                arr2 = arr[1].split(" ");

                String[] arr3;
                arr3 = arr[2].split(" ");

                String[] arr4;
                arr4 = arr[3].split(" ");

                String[] arr5;
                arr5 = arr[4].split(" ");

                BackgroundWorker backgroundWorker = new BackgroundWorker(this);
                backgroundWorker.execute(type, name, Stu_Num, email, password, arr1[0].substring(1, arr1[0].length()), arr2[1], arr3[1], arr4[1], arr5[1].substring(0, arr5[1].length()));
            }


            try {
//Initializes an HTTP Post connection
                HttpClient httpClient = new DefaultHttpClient();
                HttpPost httpPost = new HttpPost("http://lamp.ms.wits.ac.za/~s1601745/create.php");
                httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
                HttpResponse response = httpClient.execute(httpPost);
                HttpEntity entity = response.getEntity();
                is = entity.getContent();
                BufferedReader br = new BufferedReader(new InputStreamReader(is));
                br.readLine();
            } catch (ClientProtocolException e) {
                System.out.print("Error!");
            } catch (IOException e) {
                System.out.print("CHECK");
            }

            Intent intent = new Intent(RegisterActivity.this, HomeActivity.class);
//Sets the name and student number of the user
            qrGenerator.Global.setName(name);
            qrGenerator.Global.setStudent_num(Stu_Num);
            startActivity(intent);
        }




//Validates the users input on the register screen
    public boolean validate() {
        boolean valid = true;
        //checks if no courses has been selected
        if (selectedItems.size() == 0) {

            Course1.setText(("Please Select atleast one Course"));
            valid = false;
        }
        //Checks if  no name has been entered or a too long name has been entered
        if (name.isEmpty() || name.length() > 32) {
            et_name.setError("Please enter a valid name");
            valid = false;
        }
//Checks if a password has been entered
        if (password.isEmpty()) {
            et_password.setError("Please enter a valid password");
            valid = false;
        }
        //Checks if the confirm password has been entered
        if (cpassword.isEmpty()) {
            et_cpassword.setError("Please enter a valid password");
            valid = false;
        }
        //Checks if a student number has been entered or a too long student number has been entered
        if (Stu_Num.isEmpty() || Stu_Num.length() > 10) {
            et_SN.setError("Please enter your Student Number");
            valid = false;
        }
        if (cpassword.isEmpty()) {
            et_cpassword.setError("Please confirm your password");
        }
        //Checks if the password=confirm password
        if (!password.equals(cpassword)) {
            et_cpassword.setError("Passwords do not correspond");
            valid = false;
        }

        return valid;
    }
//Initiliizes the users input
    public void initialize() {
        name = et_name.getText().toString().trim();
        Stu_Num = et_SN.getText().toString().trim();
        password = et_password.getText().toString().trim();
        cpassword = et_cpassword.getText().toString().trim();
    }
}


